@model ImdbReplica.Models.ReviewViewModel

@{
    ViewBag.Title = "Edit review";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 style="text-align: center;">Edit review</h2>


<div class="form-horizontal">
    @using (@Html.BeginForm("EditSelectedReview", "Review"))
    {
        @Html.HiddenFor(x => x.ReviewId)
        <div class="form-group">
            <label class="col-md-4 control-label" for="prependedtext"></label>
            <div class="col-md-4">
                <div class="input-group">
                    <span class="input-group-addon">Title</span>
                    @Html.TextBoxFor(x => x.Title, new { @class = "form-control", @placeholder = "ex. The Hobbit" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-4 control-label" for=""></label>
            <div class="col-md-4">
                @Html.Label("Description:")
                @Html.TextAreaFor(x => x.Description, new { @class = "form-control", @placeholder = "Description | ex. The book was very interesting from start to end..." })
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-4 control-label" for="">Select type</label>
            <div class="col-md-4">
                @Html.DropDownListFor(x => x.Type, Model.Values, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Type)
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-4 control-label" for="radios">Rating</label>
            <div class="col-md-4">
                <p>
                    @foreach (var item in Model.RatingValues)
                    {
                        @Html.Label(item.Text, new { @class = "radio-inline" })
                        @Html.RadioButtonFor(x => x.UserRating, item.Value)
                    }
                    @Html.ValidationMessageFor(x => x.UserRating)
                </p>
                <p>
                    @Html.ValidationMessage("InvalidRating", new { @class = "ui-state-error-text" })
                </p>
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-4 control-label" for=""></label>
            
            <input type="submit" value="Change review" class="btn btn-success" onclick="return confirm('Do you want to change this review?')"/>
        </div>
    }

    <div class="form-group">
        <label class="col-md-4 control-label" for=""></label>
        
        <div class="col-md-4">
            <h4>Current image:</h4>
            @if (System.IO.File.Exists(Server.MapPath("~/Images/ReviewImages/" + Model.ReviewImagePath)))
            {
                <img class="image" src="~/Images/ReviewImages/@Model.ReviewImagePath"/>
            }
            else
            {
                <img class="image" src="~/Images/Shared/icon-user-default.png"/>
            }
            @using (Html.BeginForm("UploadPicture", "Review", FormMethod.Post, new {enctype = "multipart/form-data"}))
            {
                @Html.HiddenFor(x => x.ReviewId)
                <input type="file" name="file"/>
                <input type="submit" name="Submit" id="Submit" value="Upload" class="btn btn-primary" onclick="return confirm('Are you sure you want to upload this picture?')"/>
            }
        </div>
    </div>
</div>
